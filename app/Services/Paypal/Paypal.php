<?php

namespace App\Services\Paypal;

use Exception;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;
use Illuminate\Validation\ValidationException;

class Paypal
{
    private $credentials;
    private $bearer_token, $provider, $client, $paypalUrl;
    public function __construct()
    {
        if (config('paypal.mode') == 'live') {
            $this->credentials = [
                config('paypal.paypal_live_client_id'),
                config('paypal.paypal_live_secret'),
            ];
            $this->paypalUrl = 'https://api-m.paypal.com';
        } else {
            $this->credentials = [
                config('paypal.paypal_sandbox_client_id'),
                config('paypal.paypal_sandbox_secret'),
            ];
            $this->paypalUrl = 'https://api-m.sandbox.paypal.com';
        }
        $this->client = new Client();
        $this->authentication();
    }

    private function authentication()
    {
        try {
            $url = $this->paypalUrl . '/v1/oauth2/token';
            $res = $this->client->request('post', $url, [
                'auth' => $this->credentials,
                'headers' => ['Content-Type' => 'application/x-www-form-urlencoded'],
                'form_params' => [
                    'grant_type' => 'client_credentials',
                ],
            ]);

            $body = json_decode($res->getBody()->getContents());
            $this->bearer_token = $body->access_token;
            $this->provider = $body;
        } catch (ClientException $e) {
            print_r($e->getResponse()->getBody()->getContents());
        }
    }

    // this will return bearer token which is generated by paypal
    public function getAccessToken()
    {
        return $this->bearer_token;
    }

    // provider return all basic details of auth
    public function getProvider()
    {
        return $this->provider;
    }

    // return paypal url
    public function getPaypalUrl()
    {
        return $this->paypalUrl;
    }
}
